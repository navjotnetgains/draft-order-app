<!-- Draft Order Button -->
{% if template.name == 'cart' %}
{% if cart.item_count == 0 %}
  <p style="text-align: center; margin: 20px 0; font-size: 16px; color: #555; ">
   <a href="/collections/all" style="color: #4f5051ff; text-decoration: none;">
     Start adding your favorite items!
   </a>
  </p>
{% else %}
 <div class="page-width" id="main" style="display:flex; justify-content: {{ block.settings.alignment }};">
  <button
        id="create-draft-order"
        style="
          background-color: {{ block.settings.background_color | default: '#070707ff' }};
          color: {{ block.settings.text_color | default: '#ffffff' }};
          padding: 12px 24px;
          border: none;
          font-size:  15px; /* Responsive font size */
          cursor: pointer;
          margin-top: 0;
          width: 100%; /* Full width on small screens */
          max-width: 350px; /* Limits width on larger screens */
          white-space: nowrap; /* Prevents text wrapping */
          margin-bottom:50px;
        "
      >
    {{ block.settings.text | default: "Create Draft Order" | escape }}
  </button>
</div>

{% endif %}
{% endif %}


<!-- Fullscreen Modal Backdrop + Form -->
<div id="modal-overlay" style="
  display: none;
  position: fixed;
  inset: 0;
  width: 100vw;
  height: 100vh;
  z-index: 99999;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
  justify-content: center;
  align-items: center;
">
  <div style="
    background: #fff;
    padding: 24px;
    border-radius: 12px;
    width: 100%;
    max-width: 600px;
    box-shadow: 0 0 0 1px rgba(0,0,0,0.04), 0 1px 3px rgba(0,0,0,0.2);
    position: relative;
    overflow-y: auto;
    max-height: 90vh;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
  ">
    <!-- Close Button -->
    <button id="close-modal" style="
      position: absolute;
      top: 12px;
      right: 12px;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
    ">&times;</button>

    <h2 style="margin-bottom: 20px; font-size: 20px;">Shipping address</h2>

    <div style="display: flex; flex-wrap: wrap; gap: 16px;">
     <div style="flex: 1 1 100%;">
        <label>Country</label>
        <select id="country" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;">
          <option value="">Select country</option>
        </select>
        <div class="error-message" id="error-country"></div>
      </div>
      <div style="flex: 1 1 100%;">
        <label>Company</label>
        <input id="company" type="text" placeholder="Optional" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
      </div>
      <div style="flex: 1 1 100%;">
        <label>Address</label>
        <input id="addr1" type="text" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
        <div class="error-message" id="error-addr1"></div>
      </div>
      <div style="flex: 1 1 100%;">
        <label>Apartment / Suite</label>
        <input id="apartment" type="text" placeholder="Optional" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
      </div>
      <div style="flex: 1 1 48%;">
        <label>City</label>
        <input id="city" type="text" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
        <div class="error-message" id="error-city"></div>
      </div>
      <div style="flex: 1 1 48%;">
        <label>State</label>
        <select id="state" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;">
          <option value="">Select state</option>
        </select>
        <div class="error-message" id="error-state"></div>
      </div>
      <div style="flex: 1 1 100%;">
        <label>PIN code</label>
        <input id="pin" type="text" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
        <div class="error-message" id="error-pin"></div>
      </div>
    </div>

    <label style="display: flex; align-items: center; gap: 10px; margin-top: 20px;">
      <input type="checkbox" id="same-as-shipping" checked />
      Billing address is same as shipping address
    </label>

    <!-- Billing Address Form -->
    <div id="billing-address-form" style="display: none; margin-top: 20px; border-top: 1px solid #ccc; padding-top: 20px;">
      <h3 style="margin-bottom: 10px;">Billing Address</h3>
      <div style="display: flex; flex-wrap: wrap; gap: 16px;">
      <div style="flex: 1 1 100%;">
          <label>Country</label>
          <select id="billing-country" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;">
            <option value="">Select country</option>
          </select>
          <div class="error-message" id="error-billing-country"></div>
        </div>
        <div style="flex: 1 1 48%;">
          <label>City</label>
          <input id="billing-city" type="text" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
          <div class="error-message" id="error-billing-city"></div>
        </div>
        <div style="flex: 1 1 48%;">
          <label>State</label>
          <select id="billing-state" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;">
            <option value="">Select state</option>
          </select>
          <div class="error-message" id="error-billing-state"></div>
        </div>
        <div style="flex: 1 1 100%;">
          <label>Company</label>
          <input id="billing-company" type="text" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
        </div>
        <div style="flex: 1 1 100%;">
          <label>Address</label>
          <input id="billing-addr1" type="text" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
          <div class="error-message" id="error-billing-addr1"></div>
        </div>
        <div style="flex: 1 1 100%;">
          <label>Apartment / Suite</label>
          <input id="billing-apartment" type="text" placeholder="Optional" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
        </div>
        <div style="flex: 1 1 100%;">
          <label>PIN code</label>
          <input id="billing-pin" type="text" style="width: 100%; padding: 10px 12px; border: 1px solid #c9cccf; border-radius: 6px;" />
          <div class="error-message" id="error-billing-pin"></div>
        </div>
      </div>
    </div>

    <button id="submit-address" style="
      background-color: {{ block.settings.background_color | default: '#070707ff' }};
      color: {{ block.settings.text_color | default: '#ffffff' }};
      padding: 12px;
      width: 100%;
      border: none;
      border-radius: 6px;
      font-size: 16px;
      margin-top: 24px;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 8px;
    ">
      <span id="submit-text">Submit</span>
      <svg id="submit-loader" xmlns="http://www.w3.org/2000/svg" style="display:none;" width="20" height="20" viewBox="0 0 50 50" >
        <circle cx="25" cy="25" r="20" stroke="#fff" stroke-width="5" fill="none" stroke-linecap="round" />
      </svg>
    </button>
  </div>
</div>

<style>
  .error-message {
    color: #d32f2f;
    font-size: 13px;
    margin-top: 4px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
  }
   /* New style for cart notification button */
  #create-draft-order-notification {
    background-color: {{ block.settings.background_color | default: '#070707ff' }};
    color: {{ block.settings.text_color | default: '#ffffff' }};
    padding: 12px;
    border: none;
    font-size: 16px;
    cursor: pointer;
    width: 100%;
    margin-top: 15px;
  }
  /* General button style */
.create-draft-order-btn {
  display: block;
  width: 100%;
  text-align: center;
  padding: 14px;
  font-size: 14px;
  font-weight: 200;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
}
/* Drawer style (match checkout button) */
.create-draft-order-btn.drawer-style {
  display: block;
  width: 100%;
  background: #1d1d1dff !important;
  color: #fff !important;
  border-radius: 14px !important;
  margin: 10px 0 !important;
  padding: 15px !important;
  font-weight: 600 !important;
  text-align: center;
  cursor: pointer;
  transition: background 0.2s ease;
  font-weight:100 !important; 
}

.create-draft-order-btn.drawer-style:hover {
  background: #333 !important;   /* Lighter hover */
}


/* Cart notification popup style */
.create-draft-order-btn.notification-style {
  background: #4f5051;
  color: #fff;
  
  margin-bottom: 15px;
}

.create-draft-order-btn.notification-style:hover {
  transform: translateY(-3px); /* Lift up effect */
  background: #6b6b6b;
}


      @media (max-width: 750px) {
        /* Override centering on larger screens */
        #main {
          justify-content:center !important;
        }
      }
   
</style>

<script>

  let toastContainer = document.createElement('div');
  toastContainer.id = 'toast-container';
  toastContainer.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000000;
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 300px;
    width: 100%;
    pointer-events: none;
    align-items: center;
  `;
  document.body.appendChild(toastContainer);

  // Updated toast function uses this container
  function showToast(message, duration = 7000) {
    const toast = document.createElement('div');
    toast.style.background = 'rgba(0,0,0,0.8)';
    toast.style.color = 'white';
    toast.style.padding = '12px 20px';
    toast.style.borderRadius = '6px';
    toast.style.fontSize = '14px';
    toast.style.boxShadow = '0 2px 6px rgba(0,0,0,0.3)';
    toast.style.opacity = '0';
    toast.style.transition = 'opacity 0.3s ease';
    toast.style.pointerEvents = 'auto';
    toast.textContent = message;
    toastContainer.appendChild(toast);
    requestAnimationFrame(() => {
      toast.style.opacity = '1';
    });
    setTimeout(() => {
      toast.style.opacity = '0';
      toast.addEventListener('transitionend', () => {
        toast.remove();
      });
    }, duration);
  }

  window.customerData = {
    id: {{ customer.id | json }},
    email: {{ customer.email | json }},
    first_name: {{ customer.first_name | json }},
    last_name: {{ customer.last_name | json }}
  };

  async function loadCountries(selectId,stateId){
    const countrySelect = document.getElementById(selectId);
    const stateSelect=document.getElementById(stateId);

    try{
      const res= await fetch('https://countriesnow.space/api/v0.1/countries/states');
      const data= await res.json();
      const countries=data.data;
      countries.map((country)=>{
        const option=new Option(country.name,country.name)
        countrySelect.add(option)
      });
      countrySelect.addEventListener('change',()=>{
        const selectedCountry=countries.find((c)=>c.name===countrySelect.value);
        stateSelect.innerHTML = '<option value="">Select state</option>';
        if(selectedCountry && selectedCountry.states.length>0){
          selectedCountry.states.map((state)=>{
            const option =new Option(state.name,state.name)
            stateSelect.add(option)
          });
        }
      });
    }
    catch{
      console.log( 'error fetching country')
    }
  }

  function fetchCart() {
    return fetch('/cart.js').then(res => res.json());
  }

  // Add the missing clearErrors function
  function clearErrors(fields) {
    fields.forEach(field => {
      const errorEl = document.getElementById('error-' + field.id);
      if (errorEl) errorEl.textContent = '';
    });
  }
function initializeDraftOrder() {
    const modal = document.getElementById('modal-overlay');
    const closeBtn = document.getElementById('close-modal');
    const submitBtn = document.getElementById('submit-address');
    const submitText = document.getElementById('submit-text');
    const submitLoader = document.getElementById('submit-loader');
    
    // Function to handle the draft order button click
    async function handleDraftOrderClick(e) {
      e.preventDefault();
      
      if (!window.customerData?.email) {
        showToast("Please log in as a customer.");
        return;
      }
      
      const cart = await fetchCart();
      if (!cart.items || cart.items.length === 0) {
        showToast("Your cart is empty. Please add items first.");
        return;
      }
      
      modal.style.display = 'flex';
    }
    
    // Get shop domain from Shopify global object or URL
    function getShopDomain() {
      // Try different methods to get the shop domain
      if (window.Shopify && window.Shopify.shop) {
        return window.Shopify.shop;
      }
      
      // Check for shop parameter in URL
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('shop')) {
        return urlParams.get('shop');
      }
      
      // Extract from current hostname if it's a myshopify.com domain
      if (window.location.hostname.includes('.myshopify.com')) {
        return window.location.hostname;
      }
      
      // Fallback: use the hostname (may not work for custom domains)
      return window.location.hostname;
    }
    
    // Set up main cart button
    const openBtn = document.getElementById('create-draft-order');
    if (openBtn) {
      openBtn.addEventListener('click', handleDraftOrderClick);
    }
    
    // Set up cart notification button
  function setupCartNotificationButton() {
  const containers = document.querySelectorAll('.cart-notification, #cart-notification, .cart-drawer, #CartDrawer');

  containers.forEach(cartNotification => {
    if (cartNotification && !cartNotification.querySelector('#create-draft-order-notification')) {
      const button = document.createElement('button');
      button.id = 'create-draft-order-notification';
      button.textContent = '{{ block.settings.text | default: "Create Draft Order" | escape }}';

      // Add a class so we can style separately for drawer vs notification
      if (cartNotification.classList.contains('cart-drawer') || cartNotification.id === 'CartDrawer') {
        button.className = 'create-draft-order-btn drawer-style';
      } else {
        button.className = 'create-draft-order-btn notification-style';
      }

      // Keep positioning logic
      const checkoutBtn = cartNotification.querySelector('[href="/checkout"], button[name="checkout"]');
      const linksSection = cartNotification.querySelector('.cart-notification__links, .cart-drawer__footer');

      if (checkoutBtn) {
        checkoutBtn.parentNode.insertBefore(button, checkoutBtn);
      } else if (linksSection) {
        linksSection.prepend(button);
      } else {
        cartNotification.appendChild(button);
      }

      button.addEventListener('click', handleDraftOrderClick);
    }
  });
}

// Run on load + updates
document.addEventListener('DOMContentLoaded', setupCartNotificationButton);
document.addEventListener('cart:updated', setupCartNotificationButton);
document.addEventListener('cart:drawer:open', setupCartNotificationButton);

    
    // Initialize everything
    document.addEventListener("DOMContentLoaded", () => {
      modal.style.display = 'none';
      document.body.appendChild(modal);
      loadCountries('country', 'state');
      loadCountries('billing-country', 'billing-state');
      
      // Billing address toggle
      const billingToggle = document.getElementById('same-as-shipping');
      const billingForm = document.getElementById('billing-address-form');
      if (billingToggle && billingForm) {
        billingToggle.addEventListener('change', () => {
          billingForm.style.display = billingToggle.checked ? 'none' : 'block';
        });
      }
      
      // Set up cart notification button
      setupCartNotificationButton();
    });
    
    // Re-run when cart updates
    document.addEventListener('cart:updated', setupCartNotificationButton);
    
    // Use MutationObserver for dynamic content
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.addedNodes.length) {
          setupCartNotificationButton();
        }
      });
    });
    observer.observe(document.body, { childList: true, subtree: true });
    
    // Close modal handler
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        modal.style.display = 'none';
      });
    }
    
    // Submit handler with shop parameter
    if (submitBtn) {
      submitBtn.addEventListener('click', async () => {
        // Get shop domain
        const shop = getShopDomain();
        if (!shop) {
          showToast("Unable to determine shop domain.");
          return;
        }
        
        // List required fields (billing fields added conditionally)
        const requiredFields = [
          { id: 'country', name: 'Country' },
          { id: 'addr1', name: 'Address' },
          { id: 'city', name: 'City' },
          { id: 'state', name: 'State' },
          { id: 'pin', name: 'PIN code' }
        ];

        const useShipping = document.getElementById('same-as-shipping').checked;
        if (!useShipping) {
          requiredFields.push(
            { id: 'billing-country', name: 'Billing Country' },
            { id: 'billing-addr1', name: 'Billing Address' },
            { id: 'billing-city', name: 'Billing City' },
            { id: 'billing-state', name: 'Billing State' },
            { id: 'billing-pin', name: 'Billing PIN code' }
          );
        }

        clearErrors(requiredFields);

        // Validate required fields, show error messages inline
        for (const field of requiredFields) {
          const el = document.getElementById(field.id);
          const errorEl = document.getElementById('error-' + field.id);
          if (!el || !el.value.trim()) {
            if (errorEl) errorEl.textContent = `${field.name} is required`;
            el && el.focus();
            // Enable button & hide loader before exit
            submitBtn.disabled = false;
            submitText.style.display = 'inline';
            submitLoader.style.display = 'none';
            submitLoader.style.animation = '';
            return; // stop submission on first error
          }
        }

        // Disable button & show loader
        submitBtn.disabled = true;
        submitText.style.display = 'none';
        submitLoader.style.display = 'inline-block';
        submitLoader.style.animation = 'spin 1s linear infinite';

        const address = {
          address1: document.getElementById('addr1').value,
          apartment: document.getElementById('apartment').value,
          city: document.getElementById('city').value,
          state: document.getElementById('state').value,
          pin: document.getElementById('pin').value,
          company: document.getElementById('company').value,
          country: document.getElementById('country').value
        };

        let billingAddress;
        if (!useShipping) {
          billingAddress = {
            address1: document.getElementById('billing-addr1').value,
            apartment: document.getElementById('billing-apartment').value,
            city: document.getElementById('billing-city').value,
            state: document.getElementById('billing-state').value,
            pin: document.getElementById('billing-pin').value,
            country: document.getElementById('billing-country').value,
            company: document.getElementById('billing-company').value
          };
        } else {
          billingAddress = { ...address }; // same as shipping
        }

        const cart = await fetchCart();
        const customer = window.customerData;

        const discount = cart.discount_codes?.[0] || null;

        try {
          const response = await fetch(`https://draft-order-app-seven.vercel.app/api/create-draft-order`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
              customer, 
              cart, 
              address, 
              discount, 
              billingAddress, 
              useShipping,
             shop
            })
          });

          const result = await response.json();

          if (result.success) {
            await fetch('/cart/clear.js', { method: 'POST' });
            showToast("Draft order created successfully!");
            location.reload();
          } else {
            showToast("Failed: " + result.error);
          }
        } catch (e) {
          showToast("An error occurred while creating draft order.");
          console.error(e);
        } finally {
          // Enable button & hide loader
          submitBtn.disabled = false;
          submitText.style.display = 'inline';
          submitLoader.style.display = 'none';
          submitLoader.style.animation = '';
          modal.style.display = 'none';
        }
      });
    }
  }

  // Initialize everything
  initializeDraftOrder();

  // Loader spin animation
  const styleEl = document.createElement('style');
  styleEl.textContent = `
    @keyframes spin {
      0% { transform: rotate(0deg);}
      100% { transform: rotate(360deg);}
    }
  `;
  document.head.appendChild(styleEl);
</script>

{% schema %}
{
  "name": "Draft Order Button",
  "target": "body",
  "settings": [
    {
      "type": "text",
      "id": "text",
      "label": "Button Text",
      "default": "Create Draft Order"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Button Background Color",
      "default": "#070707ff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Button Text Color",
      "default": "#ffffff"
    },
    {
      "type": "select",
      "id": "alignment",
      "label": "Button Alignment",
      "default": "flex-end",
      "options": [
        { "value": "flex-start", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "flex-end", "label": "Right" }
      ]
    }
  ],
  "enabled_on": {
    "templates": ["cart","product","collection","index"],

  }
}
{% endschema %} 